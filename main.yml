- name: Setup Ubuntu droplet
  hosts: orchestrators
  gather_facts: no
  tasks:
    - name: create ubuntu 14.04 droplet on digital_ocean
      digital_ocean: >
        state=present
        command=droplet
        name=test-ubuntu
        api_token="{{ do_api_token }}"
        size_id=512mb
        region_id=fra1
        image_id=11836690
        wait=yes
        unique_name=yes
        ssh_key_ids=912686
      register: new_droplet
      always_run: yes

    - name: add the droplet to webservers host group
      add_host: name=test-ubuntu groups=webservers ansible_ssh_host={{ new_droplet.droplet.ip_address }}

    - name: temporize playbook to wait for true provisionning
      pause: seconds=10

- name: determine user available to log with
  hosts: orchestrators
  gather_facts: no
  tasks:
    - name: retrieve key from distant host
      command: ssh-keyscan "{{ new_droplet.droplet.ip_address }}"
      register: key_scan_result
      failed_when: false
      changed_when: false

    - name: check if distant host key to known_hosts
      command: "grep \"{{ key_scan_result.stdout }}\" ~/.ssh/known_hosts"
      register: key_is_present
      changed_when: key_is_present.rc != 0
      failed_when: false

    - name: remove previously registered key to known_hosts
      lineinfile:
        dest: "~/.ssh/known_hosts"
        regexp: "^.*{{ new_droplet.droplet.ip_address }}.*$"
        state: absent
        backup: yes
      when: key_is_present|changed

    - name: register distant host key to known_hosts
      lineinfile:
        dest: "~/.ssh/known_hosts"
        line: "{{ key_scan_result.stdout }}"
        state: present
        backup: yes
      when: key_is_present|changed

    - name: try to ssh with root user
      command: ssh -oBatchMode=yes {{ distant_root_name }}@{{ new_droplet.droplet.ip_address }} 'echo {{ distant_root_name }}'
      register: root_ssh_cmd_result
      ignore_errors: true

    - name: register real root user to localhost facts
      set_fact: selected_distant_user_name="{{ root_ssh_cmd_result.stdout }}"
      when: root_ssh_cmd_result|success

    - name: try to ssh with other user
      command: ssh -oBatchMode=yes {{ distant_admin_name }}@{{ new_droplet.droplet.ip_address }} 'echo {{ distant_admin_name }}'
      register: admin_ssh_cmd_result
      ignore_errors: true
      when: root_ssh_cmd_result|failed

    - name: register real root user to localhost facts
      set_fact: selected_distant_user_name="{{ admin_ssh_cmd_result.stdout }}"
      when: root_ssh_cmd_result|failed and admin_ssh_cmd_result|success

- name: Setup Ubuntu droplet
  hosts: webservers
  user: "{{ hostvars['localhost']['selected_distant_user_name'] }}"
  gather_facts: yes
  sudo: yes
  pre_tasks:
    - name: install dependencies
      apt: pkg={{ item }} update_cache=yes
      with_items:
        - build-essential
        - openssl
        - libssl-dev
        - pkg-config
        - whois
        - git
        - apt-transport-https
        - ca-certificates

    # Setup user
    - name: Create user
      user:
        name: '{{ user_name }}'
        comment: '{{ user_comment }}'
        password: '{{ user_password }}'
        shell: /bin/bash
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: .ssh/id_rsa
        groups: 'sudo'

    - name: Create ssh folder
      file: path='/home/{{ user_name }}/.ssh' state=directory mode=0700

    - name: Add public key to authorized key
      lineinfile:
        dest: "/home/{{ user_name }}/.ssh/authorized_keys"
        line: "{{ public_key }}"
        state: present
        create: yes
        backup: yes

    # Last configuration for ssh. Disable access with root user
    - name: Disable root login via ssh
      lineinfile: dest=/etc/ssh/sshd_config regexp="^PermitRootLogin (yes|no)$" line="PermitRootLogin no"
      notify:
        - service ssh restart
  roles:
    - ntp
    - nodejs
    - apache2
    - passenger
    - ufw

  handlers:
    - name: service ssh restart
      command: service ssh restart
      register: ssh_service_restart
      failed_when: ssh_service_restart.rc != 0
      changed_when: false
